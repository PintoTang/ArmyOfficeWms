using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Threading;
using CLDC.CLWS.CLWCS.Framework;
using CLDC.CLWS.CLWCS.Infrastructrue.DataModel;
using CLDC.CLWS.CLWCS.WareHouse.DataModel;
using CLDC.CLWS.CLWCS.WareHouse.Interface;
using CLDC.CLWS.CLWCS.WareHouse.ViewModel;
using CLDC.CLWS.CLWCS.WareHouse.Worker.Manage;
using CLDC.CLWS.CLWCS.WareHouse.Worker.Workers.Common;
using CLDC.CLWS.CLWCS.WareHouse.Worker.Workers.Common.View;
using CLDC.Infrastructrue.UserCtrl;
using CLDC.Infrastructrue.UserCtrl.Domain;
using CLDC.Infrastructrue.UserCtrl.Model;
using MaterialDesignThemes.Wpf;
using MenuItem = CLDC.Infrastructrue.UserCtrl.Model.MenuItem;

namespace CLDC.CLWCS.Service.MenuService.View
{
    /// <summary>
    /// DeviceConfig.xaml 的交互逻辑
    /// </summary>
    public partial class WorkerShowView : UserControl, IMainUseCtrl
    {
        readonly Dictionary<WorkerTypeEnum, List<ViewAbstract>> _workerViewDataPool = new Dictionary<WorkerTypeEnum, List<ViewAbstract>>();

        private readonly ObservableCollection<MenuItem> _mainMenuItem = new ObservableCollection<MenuItem>();
        private bool isLoaded = false;

        /// <summary>
        /// CoordinationConfig 数据
        /// </summary>
        /// <returns></returns>
        private void InitilizeAllWorkerView()
        {

            try
            {
                List<WorkerBaseAbstract> orderWorkerAbstractLst = WorkerManage.Instance.GetAllData();
                foreach (WorkerBaseAbstract worker in orderWorkerAbstractLst)
                {
                    OperateResult<ViewAbstract> workerViewResult = worker.GetViewForWpf();
                    if (!workerViewResult.IsSuccess)
                    {
                        string msg = string.Format("工作者：{0} 获取到的显示界面出错", worker.Id + worker.Name);
                        MessageBoxEx.Show(msg);
                    }
                    ViewAbstract workerView = workerViewResult.Content;
                    AddWorkerViewDic(worker.WorkerType, workerView);
                }
            }
            catch (Exception ex)
            {
                MessageBoxEx.Show("加载工作者界面发生异常：" + ex.ToString(), "异常");
            }
        }


        private void InitMenuItem()
        {
            lock (_workerViewDataPool)
            {
                foreach (KeyValuePair<WorkerTypeEnum, List<ViewAbstract>> keyValuePair in _workerViewDataPool)
                {
                    PackIconKind icon = PackIconKind.AboutCircle;
                    switch (keyValuePair.Key)
                    {
                        case WorkerTypeEnum.DispatchWorker:
                            icon = PackIconKind.BorderBottomVariant;
                            break;
                        case WorkerTypeEnum.IdentityWorker:
                            icon = PackIconKind.Telescope;
                            break;
                        case WorkerTypeEnum.InAndOutWorker:
                            icon = PackIconKind.MonitorDashboard;
                            break;
                        case WorkerTypeEnum.OrderWorker:
                            icon = PackIconKind.LorryDelivery;
                            break;
                        case WorkerTypeEnum.PalletierWorker:
                            break;
                        case WorkerTypeEnum.PickingWorker:
                            icon = PackIconKind.MotorOutline;
                            break;
                    }
                    _mainMenuItem.Add(new MenuItem(keyValuePair.Key.GetDescription(), icon, keyValuePair.Key));
                }
            }
            ListBoxMenuMin.ItemsSource = _mainMenuItem;
            ListBoxMenu.ItemsSource = _mainMenuItem;
        }


        private void AddWorkerViewDic(WorkerTypeEnum workerType, ViewAbstract workerView)
        {
            lock (_workerViewDataPool)
            {
                if (_workerViewDataPool.ContainsKey(workerType))
                {
                    _workerViewDataPool[workerType].Add(workerView);
                }
                else
                {
                    List<ViewAbstract> newViewList = new List<ViewAbstract>() { workerView };
                    _workerViewDataPool.Add(workerType, newViewList);
                }
                WppnlWorker.Children.Add(workerView);
            }
        }


        public WorkerShowView()
        {
            InitializeComponent();
           
        }


        /// <summary>
        /// 更新大小
        /// </summary>
        /// <param name="tempUCStationLst">显示的对象 ，为空则调整现有的对象大小wppnlDevice</param>
        public void DisPlayUpdateData()
        {
            int width = 0;//显示总宽度
            int minWidth = 450;//窗体最小宽度
            int newWidth = 0;//窗体 计算的新宽度
            this.WppnlWorker.Dispatcher.Invoke(new Action(
             delegate
             {
                 width = Convert.ToInt32(WppnlWorker.ActualWidth);

                 int count = width / minWidth;
                 if (count >= 5)
                 {
                     if (WppnlWorker.Children.Count <= 3)
                     {
                         count = WppnlWorker.Children.Count == 0 ? 3 : WppnlWorker.Children.Count;//最大显示4个
                     }
                     else
                     {
                         count = 4;//最大显示4个
                     }
                 }
                 newWidth = (count == 0 ? 0 : (minWidth + (width - minWidth * count) / count));
                 foreach (var loadStation in WppnlWorker.Children)
                 {
                     var nvcDevice = loadStation as UserControl;
                     if (width > 0 && newWidth >= minWidth)
                     {
                         nvcDevice.Width = newWidth;
                     }
                 }
             }), DispatcherPriority.Background);

        }


        #region 设备面板切换(工作、任务、日志)
        /// <summary>
        /// 切换设备工作状态面板
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnShowWorkStatus_Click(object sender, RoutedEventArgs e)
        {
            ChangeWorkerCardState(ShowCardShowEnum.State);
        }
        /// <summary>
        /// 切换任务工作状态面板
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnShowTaskDatas_Click(object sender, RoutedEventArgs e)
        {
            ChangeWorkerCardState(ShowCardShowEnum.Task);
        }
        /// <summary>
        /// 切换设备日志状态面板
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnShowLogInfos_Click(object sender, RoutedEventArgs e)
        {
            ChangeWorkerCardState(ShowCardShowEnum.Log);
        }


        /// <summary>
        /// tablNodeInfo  面板整体切换
        /// </summary>
        /// <param name="state"></param>
        private void ChangeWorkerCardState(ShowCardShowEnum state)
        {
            foreach (UserControl child in WppnlWorker.Children)
            {
                IShowCard card = child as IShowCard;
                if (card != null)
                {
                    card.ChangeViewState(state);
                }
            }
        }
        #endregion

        /// <summary>
        /// 检测用户 输入的查询条件 是否是通过ID查询，否则 取工位名称
        /// </summary>
        /// <param name="strInputParms"></param>
        /// <returns></returns>
        private bool IsUsedSearchById(string strInputParms)
        {
            bool isOk = false;
            try
            {
                int value = int.Parse(strInputParms);
                isOk = true;
            }
            catch (Exception ex)
            {
                //输入非ID
            }
            return isOk;
        }

        private void UserControlScrol(UserControl userControl)
        {
            var currentScrollPosition = Scroll.VerticalOffset;
            var point = new Point(0, currentScrollPosition);
            var targetPosition = userControl.TransformToVisual(Scroll).Transform(point);
            Scroll.ScrollToVerticalOffset(targetPosition.Y);

            WareHouseViewModelBase tempViewModelBase = userControl.DataContext as WareHouseViewModelBase;
            tempViewModelBase.IsChangedColor = false;
            tempViewModelBase.IsChangedColor = true;
        }
        #region  查询节点对象  根据节点名称和ID(模糊查询)
        /// <summary>
        ///  查询节点对象  根据节点名称和ID(模糊查询)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSearchUCStation_Click(object sender, RoutedEventArgs e)
        {
            DataSearchMehod();
        }

        private void DataSearchMehod()
        {
            var Loads = this.Dispatcher.BeginInvoke(new Action(() =>
           {
               string searchKey = TxtInputStationInfo.Text.Trim();

               if (string.IsNullOrEmpty(searchKey)) return;
               if (ValidData.CheckSpecialCharacters(TxtInputStationInfo.Text))
               {
                   SnackbarQueue.Enqueue(string.Format("禁止非法输入：{0} ", TxtInputStationInfo.Text));
                   return;
               }

               if (WppnlWorker.Children.Count == 0) return;
               bool isUsedIdSearch = IsUsedSearchById(searchKey);
               foreach (UserControl control in WppnlWorker.Children)
               {
                   ViewAbstract card=control as ViewAbstract;
                   if (card==null)
                   {
                       continue;
                   }
                   if (isUsedIdSearch)
                   {
                       //ID查询
                       int id = int.Parse(searchKey);
                       if (id == card.Id)
                       {
                           UserControlScrol(card);
                           break;//只查询一个
                       }
                   }
                   else
                   {
                       //工位名称查询
                       if (Name == card.ShowName)
                       {
                           UserControlScrol(card);
                           break;//只查询一个
                       }
                   }
               }
           }), DispatcherPriority.Background);
        }
        #endregion

        /// <summary>
        /// 将需要显示的UCStation对象放入Pannel中加载
        /// </summary>
        /// <param name="tempUCStationLst">tempUCStationLst </param>
        public void DisPlayUCStationInPannel(List<UserControl> tempUCStationLst)
        {
            var Loads = this.Dispatcher.BeginInvoke(new Action(() =>
            {
                WppnlWorker.Children.Clear();
                if (tempUCStationLst == null || tempUCStationLst.Count == 0) return;
                foreach (var nvcDevice in tempUCStationLst)
                {
                    if (nvcDevice == null) continue;
                    WppnlWorker.Children.Add(nvcDevice);
                    DisPlayUpdateData();
                }
            }), DispatcherPriority.Background);
        }

        private void txtInputStationInfo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key != Key.Enter) return;
            DataSearchMehod();
        }

        private void BtnClearInputText_Click(object sender, RoutedEventArgs e)
        {
            TxtInputStationInfo.Text = "";
        }

        private void ContentDockPanel_OnSizeChanged(object sender, SizeChangedEventArgs e)
        {
            DisPlayUpdateData();
        }

        private string _useCtrlId = "组件管理";

        public string UseCtrlId
        {
            get
            {
                return _useCtrlId;
            }
            set { _useCtrlId = value; }
        }

        public void Show()
        {
            this.Visibility = System.Windows.Visibility.Visible;
        }

        public void Hide()
        {
            this.Visibility = System.Windows.Visibility.Hidden;
        }

        private void FilterDeviceView(object where)
        {
            if (where == null)
            {
                lock (_workerViewDataPool)
                {
                    foreach (KeyValuePair<WorkerTypeEnum, List<ViewAbstract>> keyValue in _workerViewDataPool)
                    {
                        foreach (ViewAbstract deviceView in keyValue.Value)
                        {
                            deviceView.Show();
                        }
                    }
                }
                return;
            }
            WorkerTypeEnum deviceType = (WorkerTypeEnum)where;
            lock (_workerViewDataPool)
            {
                foreach (KeyValuePair<WorkerTypeEnum, List<ViewAbstract>> keyValue in _workerViewDataPool)
                {
                    if (keyValue.Key.Equals(deviceType))
                    {
                        keyValue.Value.ForEach(d => d.Show());
                    }
                    else
                    {
                        keyValue.Value.ForEach(d => d.Hide());
                    }
                }
            }

        }

        private void BtnShowAll_OnClick(object sender, RoutedEventArgs e)
        {
            FilterDeviceView(null);
            DisPlayUpdateData();
            MenuToggleButton.IsChecked = false;
        }

        private void ListBoxMenuMin_OnPreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            ListBox lb = sender as ListBox;
            if (lb == null)
            {
                return;
            }
            MenuItem selectedItem = (MenuItem)lb.SelectedValue;
            if (selectedItem == null)
            {
                return;
            }
            FilterDeviceView(selectedItem.Tag);
            DisPlayUpdateData();
            MenuToggleButton.IsChecked = false;
        }

        private void ShowHasTask()
        {
            lock (_workerViewDataPool)
            {
                foreach (KeyValuePair<WorkerTypeEnum, List<ViewAbstract>> keyValue in _workerViewDataPool)
                {
                    keyValue.Value.ForEach(v =>
                    {
                        if (v.IsHasAnyTask())
                        {
                            v.Show();
                        }
                        else
                        {
                            v.Hide();
                        }
                    });
                }
            }
        }

        private void ShowHasError()
        {
            lock (_workerViewDataPool)
            {
                foreach (KeyValuePair<WorkerTypeEnum, List<ViewAbstract>> keyValue in _workerViewDataPool)
                {
                    keyValue.Value.ForEach(v =>
                    {
                        if (v.IsHasError())
                        {
                            v.Show();
                        }
                        else
                        {
                            v.Hide();
                        }
                    });
                }
            }
        }

        private void CbHasTask_OnChecked(object sender, RoutedEventArgs e)
        {
            ShowHasTask();
        }

        private void CbHasTask_OnUnchecked(object sender, RoutedEventArgs e)
        {
            FilterDeviceView(null);
            DisPlayUpdateData();
        }

        private void CbError_OnChecked(object sender, RoutedEventArgs e)
        {
            ShowHasError();
        }

        private void CbError_OnUnchecked(object sender, RoutedEventArgs e)
        {
            FilterDeviceView(null);
            DisPlayUpdateData();
        }

        private void WorkerShowView_OnLoaded(object sender, RoutedEventArgs e)
        {
            this.Dispatcher.InvokeAsync(() =>
            {
                if (isLoaded == false)
                {
                    InitilizeAllWorkerView();
                    InitMenuItem();
                    isLoaded = true;
                }
                DisPlayUpdateData();

            }, DispatcherPriority.DataBind);
        }
    }
}
